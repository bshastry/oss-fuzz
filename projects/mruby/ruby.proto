syntax = "proto2";

message VarRef {
  required int32 varnum = 1;
}

message ArrType {
    repeated Const elements = 1;
}

message KVPair {
    required string key = 1;
    required string val = 2;
}

message HashType {
    repeated KVPair keyval = 1;
}

message StringExtNoArg {
  enum StrExtOp {
    DUMP = 0;
    STRIP = 1;
    LSTRIP = 2;
    RSTRIP = 3;
    STRIPE = 4;
    LSTRIPE = 5;
    RSTRIPE = 6;
    SWAPCASE = 7;
    SWAPCASEE = 8;
    SQUEEZE = 9;
  }
  required StrExtOp str_op = 1;
  required string str_arg = 2;
}

message Const {
    oneof const_oneof {
        int32 int_lit = 1;
        ArrType arr_lit = 2;
        HashType hash_lit = 3;
        bool bool_val = 4;
        string str_lit = 5;
    }
}

message BinaryOp {
  enum Op {
    ADD = 0;
    SUB = 1;
    MUL = 2;
    DIV = 3;
    MOD = 4;
    XOR = 5;
    AND = 6;
    OR = 7;
    EQ = 8;
    NE = 9;
    LE = 10;
    GE = 11;
    LT = 12;
    GT = 13;
    LS = 14;
    RS = 15;
  };
  required Op op = 1;
  required Rvalue left = 2;
  required Rvalue right = 3;
}

message Rvalue {
  oneof rvalue_oneof {
    VarRef varref = 1;
    Const cons = 2;
    BinaryOp binop = 3;
    Array arrop = 4;
    StringExtNoArg strextop = 5;
  }
}

message AssignmentStatement {
  required VarRef lvalue = 1;
  required Rvalue rvalue = 2;
}


message IfElse {
  required Rvalue cond = 1;
  required StatementSeq if_body = 2;
  required StatementSeq else_body = 3;
}

message While {
  required Rvalue cond = 1;
  required StatementSeq body = 2;
}

//TODO: Add Switch statement
message Switch {
    required Rvalue switch_var = 1;
    repeated Rvalue cond = 2;
}

message Ternary {
    required Rvalue tern_cond = 1;
    required Rvalue t_branch = 2;
    required Rvalue f_branch = 3;
}

message ObjectSpace {
    enum OS_methods {
        COUNT = 1;
//        EACH = 2;
    }
    required OS_methods os_func = 1;
    required HashType os_arg = 2;
}

message Time {
    enum T_methods {
        AT = 1;
        GM = 2;
    }
    required T_methods t_func = 1;
    required int32 t_arg = 2;
}

message Array {
    enum Arr_methods {
        FLATTEN = 1;
        COMPACT = 2;
        FETCH = 3;
        FILL = 4;
        REV = 5;
        ROTATE = 6;
        ROTATE_E = 7;
        DELETEIF = 8;
        INSERT = 9;
        BSEARCH = 10;
        KEEPIF = 11;
        SELECT = 12;
        VALUES_AT = 13;
        BLOCK = 14;
        TO_H = 15;
        DIG = 16;
        SLICE = 17;
        PERM = 18;
        COMB = 19;
        ASSOC = 20;
        RASSOC = 21;
    }
    required Arr_methods arr_func = 1;
    required ArrType  arr_arg = 2;
    required Rvalue   val_arg = 3;
}

message BuiltinFuncs {
    oneof bifunc_oneof {
        ObjectSpace os = 1;
        Time time = 2;
        Array arr = 3;
    }
}

message Statement {
  oneof stmt_oneof {
    AssignmentStatement assignment = 1;
    IfElse              ifelse     = 2;
    Ternary             ternary_stmt = 3;
    BuiltinFuncs        builtins = 4;
    StatementSeq        blockstmt = 5;
  }
}

message StatementSeq {
  repeated Statement statements = 1;
}

message Function {
  required StatementSeq statements = 1;
}

package ruby_fuzzer;