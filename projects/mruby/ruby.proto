syntax = "proto2";

message VarRef {
  required int32 varnum = 1;
}

message Lvalue {
  required VarRef varref = 1;
}

message Const {
    enum DS {
        ARRAY = 1;
        HASH = 2;
    }
    oneof const_oneof {
        int32 int_lit = 1;
        string str_lit = 2;
        DS  data_struct = 3;
    }
}

message BinaryOp {
  enum Op {
    ADD = 0;
    SUB = 1;
    MUL = 2;
    DIV = 3;
    MOD = 4;
    XOR = 5;
    AND = 6;
    OR = 7;
    EQ = 8;
    NE = 9;
    LE = 10;
    GE = 11;
    LT = 12;
    GT = 13;
    LS = 14;
    RS = 15;
  };
  required Op op = 1;
  required Rvalue left = 2;
  required Rvalue right = 3;
}

message Rvalue {
  oneof rvalue_oneof {
    VarRef varref = 1;
    Const cons = 2;
    BinaryOp binop = 3;
  }
}

message AssignmentStatement {
  required Lvalue lvalue = 1;
  required Rvalue rvalue = 2;
}


message IfElse {
  required Rvalue cond = 1;
  required StatementSeq if_body = 2;
  required StatementSeq else_body = 3;
}

message While {
  required Rvalue cond = 1;
  required StatementSeq body = 2;
}

//TODO: Add Switch statement
message Switch {
    required Rvalue switch_var = 1;
    repeated Rvalue cond = 2;
}

message Ternary {
    required Rvalue tern_cond = 1;
    required Rvalue t_branch = 2;
    required Rvalue f_branch = 3;
}

message BuiltinFuncs {
    enum BiF {
        PRINT = 1;
        PUTS = 2;
    }
    required BiF bifunc = 1;
    required Rvalue arg = 2;
}


message Statement {
  oneof stmt_oneof {
    AssignmentStatement assignment = 1;
    IfElse              ifelse     = 2;
    While               while_loop = 3;
    Ternary             ternary_stmt = 4;
    BuiltinFuncs        builtins = 5;
  }
}

message StatementSeq {
  repeated Statement statements = 1;
}

message Function {
  required StatementSeq statements = 1;
}

package ruby_fuzzer;